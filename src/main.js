/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var d=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var c=Object.prototype.hasOwnProperty;var m=(n,e)=>{for(var s in e)d(n,s,{get:e[s],enumerable:!0})},b=(n,e,s,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of p(e))!c.call(n,t)&&t!==s&&d(n,t,{get:()=>e[t],enumerable:!(i=u(e,t))||i.enumerable});return n};var h=n=>b(d({},"__esModule",{value:!0}),n);var f={};m(f,{default:()=>g});module.exports=h(f);var a=require("obsidian"),r={lastActivePlugins:[],disableSelf:!0},g=class extends a.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new o(this.app,this)),this.app.workspace.onLayoutReady(()=>{this.registerPluginCommands()})}registerPluginCommands(){this.addGlobalCommands();let s=this.app.plugins.manifests;for(let i in s){if(i===this.manifest.id)continue;let l=s[i].name;this.addCommand({id:`plugins-toggler-enable-${i}`,name:`Enable: ${l}`,callback:async()=>{await this.app.plugins.enablePlugin(i),new a.Notice(`Plugin enabled: ${l}`)}}),this.addCommand({id:`plugins-toggler-disable-${i}`,name:`Disable: ${l}`,callback:async()=>{await this.app.plugins.disablePlugin(i),new a.Notice(`Plugin disabled: ${l}`)}}),this.addCommand({id:`plugins-toggler-reload-${i}`,name:`Reload: ${l}`,callback:async()=>{await this.app.plugins.disablePlugin(i),await this.app.plugins.enablePlugin(i),new a.Notice(`Plugin reloaded: ${l}`)}})}}addGlobalCommands(){this.addCommand({id:"plugins-toggler-disable-all-remember",name:"Disable ALL plugins (remembering active ones)",callback:async()=>{let s=Object.keys(this.app.plugins.plugins);this.settings.lastActivePlugins=s.filter(i=>i!==this.manifest.id),await this.saveSettings();for(let i of s)i===this.manifest.id&&!this.settings.disableSelf||await this.app.plugins.disablePlugin(i)}}),this.addCommand({id:"plugins-toggler-reenable-remembered",name:"Re-enable remembered plugins",callback:async()=>{let s=[...this.settings.lastActivePlugins];this.settings.lastActivePlugins=[],await this.saveSettings();for(let i of s)await this.app.plugins.enablePlugin(i)}})}onunload(){}async loadSettings(){this.settings=Object.assign({},r,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},o=class extends a.PluginSettingTab{constructor(s,i){super(s,i);this.plugin=i}display(){let{containerEl:s}=this;s.empty(),new a.Setting(s).setName("Disable self with ALL commands").setDesc("If enabled, this plugin will also be disabled when using 'Disable ALL plugins' commands.").addToggle(i=>i.setValue(this.plugin.settings.disableSelf).onChange(async t=>{this.plugin.settings.disableSelf=t,await this.plugin.saveSettings()}))}};
